{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MD250709\\\\OneDrive - NCR Corporation\\\\Desktop\\\\12-multipage-spa-react-routerr\\\\frontend\\\\src\\\\pages\\\\EventDetailPage.js\";\nimport { json, useParams } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: parameter.eventId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n};\n_c = EventDetailPage;\nexport default EventDetailPage;\n\n// create a new loader function to load all data related to selected event item\n\nexport async function loader(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.eventId; // => via params we can access parameters that are passed to component, in this case /events/:eventId\n\n  const response = await fetch('http://localhost8080:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["json","useParams","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","children","event","parameter","eventId","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","request","params","id","response","fetch","ok","message","status","$RefreshReg$"],"sources":["C:/Users/MD250709/OneDrive - NCR Corporation/Desktop/12-multipage-spa-react-routerr/frontend/src/pages/EventDetailPage.js"],"sourcesContent":["import { json, useParams } from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\n\r\nconst EventDetailPage = () => {\r\n\r\n\r\n   return(\r\n      <>\r\n         <EventItem event={parameter.eventId} />\r\n      </>\r\n   );\r\n\r\n};\r\n\r\n\r\nexport default EventDetailPage;\r\n\r\n// create a new loader function to load all data related to selected event item\r\n\r\nexport async function loader({request, params}) {\r\n\r\n   const id = params.eventId; // => via params we can access parameters that are passed to component, in this case /events/:eventId\r\n\r\n   const response = await fetch('http://localhost8080:8080/events/' + id);\r\n\r\n   if(!response.ok){\r\n      throw json({message: 'Could not fetch details for selected event'},\r\n         {status: 500},\r\n      )\r\n   }else{\r\n      \r\n      return response;\r\n   }\r\n\r\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAG3B,oBACGH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACGJ,OAAA,CAACF,SAAS;MAACO,KAAK,EAAEC,SAAS,CAACC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACxC,CAAC;AAGT,CAAC;AAACC,EAAA,GATIT,eAAe;AAYrB,eAAeA,eAAe;;AAE9B;;AAEA,OAAO,eAAeU,MAAMA,CAAAC,IAAA,EAAoB;EAAA,IAAnB;IAACC,OAAO;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAE3C,MAAMG,EAAE,GAAGD,MAAM,CAACT,OAAO,CAAC,CAAC;;EAE3B,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,GAAGF,EAAE,CAAC;EAEtE,IAAG,CAACC,QAAQ,CAACE,EAAE,EAAC;IACb,MAAMxB,IAAI,CAAC;MAACyB,OAAO,EAAE;IAA4C,CAAC,EAC/D;MAACC,MAAM,EAAE;IAAG,CACf,CAAC;EACJ,CAAC,MAAI;IAEF,OAAOJ,QAAQ;EAClB;AAEH;AAAC,IAAAN,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
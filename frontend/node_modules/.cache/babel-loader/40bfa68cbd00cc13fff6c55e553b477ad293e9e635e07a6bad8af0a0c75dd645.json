{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TEISTU\\\\Desktop\\\\12-multipage-spa-react-routerr\\\\frontend\\\\src\\\\App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements) X\n//    - HomePage X\n//    - EventsPage X\n//    - EventDetailPage X\n//    - NewEventPage X\n//    - EditEventPage X\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage X\n//    - /events => EventsPage X\n//    - /events/<some-id> => EventDetailPage X\n//    - /events/new => NewEventPage X\n//    - /events/<some-id>/edit => EditEventPage X\n// 3. Add a root layout that adds the <MainNavigation> component above all page components X\n// 4. Add properly working links to the MainNavigation X\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active X\n// 6. Output a list of dummy events to the EventsPage X\n//    Every list item should include a link to the respective EventDetailPage X\n// 7. Output the ID of the selected event on the EventDetailPage X\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components X\n\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport HomePage from '../pages/HomePage';\nimport EventsPage from './components/EventsPage';\nimport EventDetailPage from '../pages/EventDetailPage';\nimport NewEventPage from '../pages/NewEventPage';\nimport EditEventPage from '../pages/EditEventPage';\nimport EventsNavigationBar from './components/EventsNavigation';\nimport RootMainNavigationBar from './Root/Root';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myRouter = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(RootMainNavigationBar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 14\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 29\n    }, this)\n  }, {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventsNavigationBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 30\n      }, this)\n    }, {\n      path: 'events/:eventId',\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 42\n      }, this)\n    }, {\n      path: 'events/new',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 37\n      }, this)\n    }, {\n      path: 'events/:eventId/edit',\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 47\n      }, this)\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: myRouter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","HomePage","EventsPage","EventDetailPage","NewEventPage","EditEventPage","EventsNavigationBar","RootMainNavigationBar","jsxDEV","_jsxDEV","myRouter","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","App","router","_c","$RefreshReg$"],"sources":["C:/Users/TEISTU/Desktop/12-multipage-spa-react-routerr/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements) X\n//    - HomePage X\n//    - EventsPage X\n//    - EventDetailPage X\n//    - NewEventPage X\n//    - EditEventPage X\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage X\n//    - /events => EventsPage X\n//    - /events/<some-id> => EventDetailPage X\n//    - /events/new => NewEventPage X\n//    - /events/<some-id>/edit => EditEventPage X\n// 3. Add a root layout that adds the <MainNavigation> component above all page components X\n// 4. Add properly working links to the MainNavigation X\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active X\n// 6. Output a list of dummy events to the EventsPage X\n//    Every list item should include a link to the respective EventDetailPage X\n// 7. Output the ID of the selected event on the EventDetailPage X\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components X\n\nimport {createBrowserRouter, RouterProvider} from 'react-router-dom';\n\nimport HomePage from '../pages/HomePage';\nimport EventsPage from './components/EventsPage';\nimport EventDetailPage from '../pages/EventDetailPage';\nimport NewEventPage from '../pages/NewEventPage';\nimport EditEventPage from '../pages/EditEventPage';\nimport EventsNavigationBar from './components/EventsNavigation';\n\nimport RootMainNavigationBar from './Root/Root';\n\nconst myRouter = createBrowserRouter([\n\n  { path: '/', \n    element: <RootMainNavigationBar />, \n    children: [\n\n    { index: true, element: <HomePage />},\n    { path:'events', \n      element: <EventsNavigationBar />, \n      children: [\n\n      {index: true, element: <EventsPage />},\n      {path: 'events/:eventId', element: <EventDetailPage />},\n      {path: 'events/new', element: <NewEventPage />},\n      {path: 'events/:eventId/edit', element: <EditEventPage />}\n\n    ]}\n\n  ]}\n\n])\n\nfunction App() {\n  return <RouterProvider router = {myRouter}/>;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,mBAAmB,EAAEC,cAAc,QAAO,kBAAkB;AAEpE,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,mBAAmB,MAAM,+BAA+B;AAE/D,OAAOC,qBAAqB,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,QAAQ,GAAGX,mBAAmB,CAAC,CAEnC;EAAEY,IAAI,EAAE,GAAG;EACTC,OAAO,eAAEH,OAAA,CAACF,qBAAqB;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAClCC,QAAQ,EAAE,CAEV;IAAEC,KAAK,EAAE,IAAI;IAAEN,OAAO,eAAEH,OAAA,CAACR,QAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,CAAC,EACrC;IAAEL,IAAI,EAAC,QAAQ;IACbC,OAAO,eAAEH,OAAA,CAACH,mBAAmB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAChCC,QAAQ,EAAE,CAEV;MAACC,KAAK,EAAE,IAAI;MAAEN,OAAO,eAAEH,OAAA,CAACP,UAAU;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC,EACtC;MAACL,IAAI,EAAE,iBAAiB;MAAEC,OAAO,eAAEH,OAAA,CAACN,eAAe;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC,EACvD;MAACL,IAAI,EAAE,YAAY;MAAEC,OAAO,eAAEH,OAAA,CAACL,YAAY;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC,EAC/C;MAACL,IAAI,EAAE,sBAAsB;MAAEC,OAAO,eAAEH,OAAA,CAACJ,aAAa;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC;EAE3D,CAAC;AAEH,CAAC,CAEH,CAAC;AAEF,SAASG,GAAGA,CAAA,EAAG;EACb,oBAAOV,OAAA,CAACT,cAAc;IAACoB,MAAM,EAAIV;EAAS;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAC9C;AAACK,EAAA,GAFQF,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
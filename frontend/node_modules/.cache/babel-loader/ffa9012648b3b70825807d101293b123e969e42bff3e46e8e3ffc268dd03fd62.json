{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MD250709\\\\OneDrive - NCR Corporation\\\\Desktop\\\\12-multipage-spa-react-routerr\\\\frontend\\\\src\\\\pages\\\\EventDetailPage.js\",\n  _s = $RefreshSig$();\nimport { json, redirect, useLoaderData, useParams, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const data = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n};\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\n\n// create a new loader function to load all data related to selected event item\n\nexport async function loader(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.eventId; // => via params we can access parameters that are passed to component, in this case /events/:eventId\n\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function action(_ref2) {\n  let {\n    params,\n    request\n  } = _ref2;\n  const eventId = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\n\n/**\r\n *    SINCE WE DEFINED loader in Router as: loader: {eventDetailLoader}} , {loader as eventDetailLoader} from './pages/EventDetailPage';\r\n * \r\n *    eventDetailsLoader is bind to loader function inside EventDetails page, that function will execute and return some response message,\r\n *       that response is being passed to => const data = useLoaderData() and with data object we can access the event as shown in return JSX statement <EventItem event = {data.event} />\r\n\r\n * \r\n * \r\n */\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["json","redirect","useLoaderData","useParams","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","request","params","id","eventId","response","fetch","ok","message","status","action","_ref2","method","$RefreshReg$"],"sources":["C:/Users/MD250709/OneDrive - NCR Corporation/Desktop/12-multipage-spa-react-routerr/frontend/src/pages/EventDetailPage.js"],"sourcesContent":["import { json, redirect, useLoaderData, useParams, useRouteLoaderData } from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\n\r\nconst EventDetailPage = () => {\r\n\r\n   const data = useRouteLoaderData('event-detail');\r\n\r\n   return(\r\n      <>\r\n         <EventItem event={data.event} />\r\n      </>\r\n   );\r\n\r\n};\r\n\r\n\r\nexport default EventDetailPage;\r\n\r\n// create a new loader function to load all data related to selected event item\r\n\r\nexport async function loader({request, params}) {\r\n\r\n   const id = params.eventId; // => via params we can access parameters that are passed to component, in this case /events/:eventId\r\n\r\n   const response = await fetch('http://localhost:8080/events/' + id);\r\n\r\n   if(!response.ok){\r\n      throw json({message: 'Could not fetch details for selected event'},\r\n         {status: 500},\r\n      )\r\n   }else{\r\n      \r\n      return response;\r\n   }\r\n\r\n}\r\n\r\n\r\nexport async function action({params, request}) {\r\n\r\n   const eventId = params.eventId;\r\n\r\n   const response = await fetch('http://localhost:8080/events/' + eventId, {\r\n      method: request.method,\r\n   });\r\n\r\n   if(!response.ok){\r\n      throw json(\r\n         {message: 'Could not delete event'},\r\n         {status: 500,\r\n         }\r\n      )\r\n   }\r\n   return redirect('/events');\r\n}\r\n\r\n\r\n\r\n/**\r\n *    SINCE WE DEFINED loader in Router as: loader: {eventDetailLoader}} , {loader as eventDetailLoader} from './pages/EventDetailPage';\r\n * \r\n *    eventDetailsLoader is bind to loader function inside EventDetails page, that function will execute and return some response message,\r\n *       that response is being passed to => const data = useLoaderData() and with data object we can access the event as shown in return JSX statement <EventItem event = {data.event} />\r\n\r\n * \r\n * \r\n */"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,SAAS,EAAEC,kBAAkB,QAAQ,kBAAkB;AAC/F,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE3B,MAAMC,IAAI,GAAGR,kBAAkB,CAAC,cAAc,CAAC;EAE/C,oBACGG,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACGN,OAAA,CAACF,SAAS;MAACS,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACjC,CAAC;AAGT,CAAC;AAACP,EAAA,CAVID,eAAe;EAAA,QAELN,kBAAkB;AAAA;AAAAe,EAAA,GAF5BT,eAAe;AAarB,eAAeA,eAAe;;AAE9B;;AAEA,OAAO,eAAeU,MAAMA,CAAAC,IAAA,EAAoB;EAAA,IAAnB;IAACC,OAAO;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAE3C,MAAMG,EAAE,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC;;EAE3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAG,CAACE,QAAQ,CAACE,EAAE,EAAC;IACb,MAAM5B,IAAI,CAAC;MAAC6B,OAAO,EAAE;IAA4C,CAAC,EAC/D;MAACC,MAAM,EAAE;IAAG,CACf,CAAC;EACJ,CAAC,MAAI;IAEF,OAAOJ,QAAQ;EAClB;AAEH;AAGA,OAAO,eAAeK,MAAMA,CAAAC,KAAA,EAAoB;EAAA,IAAnB;IAACT,MAAM;IAAED;EAAO,CAAC,GAAAU,KAAA;EAE3C,MAAMP,OAAO,GAAGF,MAAM,CAACE,OAAO;EAE9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,OAAO,EAAE;IACrEQ,MAAM,EAAEX,OAAO,CAACW;EACnB,CAAC,CAAC;EAEF,IAAG,CAACP,QAAQ,CAACE,EAAE,EAAC;IACb,MAAM5B,IAAI,CACP;MAAC6B,OAAO,EAAE;IAAwB,CAAC,EACnC;MAACC,MAAM,EAAE;IACT,CACH,CAAC;EACJ;EACA,OAAO7B,QAAQ,CAAC,SAAS,CAAC;AAC7B;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,IAAAkB,EAAA;AAAAe,YAAA,CAAAf,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}